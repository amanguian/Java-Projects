trong id=line-0 class="highlight-808639">package finalproject;
 
import java.util.*;
import java.io.*;
 
 
public class ChessSudoku {
	/* SIZE is the size parameter of the Sudoku puzzle, and N is the square of the size.  For
	 * a standard Sudoku puzzle, SIZE is 3 and N is 9.
	 */
	public int SIZE, N;
 
	/* The grid contains all the numbers in the Sudoku puzzle.  Numbers which have
	 * not yet been revealed are stored as 0.
	 */
	public int grid[][];
 
	/* Booleans indicating whether of not one or more of the chess rules should be
	 * applied to this Sudoku.
	 */
	public boolean knightRule;
	public boolean kingRule;
	public boolean queenRule;
 
 
	// Field that stores the same Sudoku puzzle solved in all possible ways
	public HashSet<ChessSudoku> solutions = new HashSet<ChessSudoku>();
 
 
	/* The solve() method should remove all the unknown characters ('x') in the grid
	 * and replace them with the numbers in the correct range that satisfy the constraints
	 * of the Sudoku puzzle. If true is provided as input, the method should find finds ALL
	 * possible solutions and store them in the field named solutions. */
 
	//Let's create private methods to check whether or not a number is already in a row/column/grid
 
	private boolean Row(int row, int input_number) {
		for (int i = 0; i < this.N; i++) {
			if (grid[row][i] == input_number) {
				return false;
			}
		}
		return true;
	}
 
	private boolean Column(int column, int input_number) {
		for (int i = 0; i < this.N; i++) {
			if (grid[i][column] == input_number) {
				return false;
			}
		}
		return true;
	}
 
	private boolean Grid(int row, int column, int input_number) {
		int a = row - (row % SIZE);
		int b = column - (column % SIZE);
 
 
		for (int i = a; i < a + SIZE; i++) {
			for (int j = b; j < b + SIZE; j++) {
				if (grid[i][j] == input_number) {
					return false;
				}
			}
		}
		return true;
	}
 
	private boolean KnightRule(int row, int column, int input_number) {
		//if (knightRule) {
		if (row - 2 >= 0) {
			if (column - 1 >= 0 && grid[row - 2][column - 1] == input_number) {
				return false;
			}
			if (column + 1 < N && grid[row - 2][column + 1] == input_number) {
				return false;
			}
 
		}
 
		if (row - 1 >= 0) {
			if (column - 2 >= 0 && grid[row - 1][column - 2] == input_number) {
				return false;
			}
			if (column + 2 < N && grid[row - 1][column + 2] == input_number) {
				return false;
			}
		}
		if (row + 1 < N) {
			if (column + 2 < N && grid[row + 1][column + 2] == input_number) {
				return false;
			}
			if (column - 2 >= 0 && grid[row + 1][column - 2] == input_number) {
				return false;
			}
 
		}
		if (row + 2 < N) {
			if (column + 1 < N && grid[row + 2][column + 1] == input_number) {
				return false;
			}
			if (column - 1 >= 0 && grid[row + 2][column - 1] == input_number) {
				return false;
			}
		}
 
		return true;//Si il n'y a pas de knight rule Ã§a return true
	}
 
 
	private boolean KingRule(int row, int column, int input_number) {
		//if (kingRule) {
		if (row - 1 >= 0) {
			if (column - 1 >= 0 && grid[row - 1][column - 1] == input_number) {
				return false;
			} else if (column + 1 < N && grid[row - 1][column + 1] == input_number) {
				return false;
			}
		}
		if (row + 1 < N) {
			if (column - 1 >= 0 && grid[row + 1][column - 1] == input_number) {
				return false;
			} else if (column + 1 < N && grid[row + 1][column + 1] == input_number) {
				return false;
			}
		}
 
		return true;
	}
 
 
 
	private boolean QueenRule(int row, int column, int input_number) {
		if (input_number==N) {
 
			//Let's check the diagonals
 
			int def_row =row;
			int def_column = column;
 
			while (def_row >= 0 && def_column < N) {
				int i=1;
				if (def_row - i >= 0 && def_column + i < N) {
					def_row -= i;
					def_column += i;
					if (grid[def_row][def_column] == N) {
						return false;
					}
				}
				else{
					break;
				}
			}
 
			def_row =row;
			def_column = column;
			while (def_row >= 0 && def_column >= 0) {
				int a=1;
				if (def_row - a >= 0 && def_column - a >= 0) {
					def_row -= a;
					def_column -= a;
					if (grid[def_row][def_column] == N) {
						return false;
					}
				}
				else{
					break;
				}
			}
 
			def_row =row;
			def_column = column;
			while (def_row < N && def_column < N) {
				int b=1;
				if (def_row + b < N && def_column + b < N) {
					def_row += b;
					def_column += b;
					if (grid[def_row][def_column] == N) {
						return false;
					}
				}
				else{
					break;
				}
			}
 
 
			def_row =row;
			def_column = column;
			while (def_row < N && def_column >= 0) {
				int c=1;
				if (def_row + c < N && def_column - c >= 0) {
					def_row += c;
					def_column -= c;
					if (grid[def_row][def_column] == N) {
						return false;
					}
				}
				else{
					break;
				}
			}
		}
		return true;
	}
 
	private boolean valid_input_number(int row, int column, int input_number) {
		boolean sudoku = Grid(row, column, input_number) && Column(column, input_number) && Row(row, input_number);
		if (knightRule) {
			sudoku = sudoku && KnightRule(row, column, input_number);
		}
		if (kingRule) {
			sudoku = sudoku && KingRule(row, column, input_number);
		}
		if (queenRule) {
			sudoku = sudoku && QueenRule(row, column, input_number);
		}
		return sudoku;
	}
 
 
	private boolean solve_sudoku(boolean allSolutions, int column, int row) {
 
 
 
		if (column==N && row==(N - 1)) {
 
			if(allSolutions) {
 
 
 
				ChessSudoku new_sol_temp = new ChessSudoku(SIZE);
 
				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						new_sol_temp.grid[i][j] = this.grid[i][j];
					}
				}
 
 
				new_sol_temp.N = this.N;
 
				
 
				solutions.add(new_sol_temp);
 
				return false;
			}
			return true;
		}
		if (N==column) {
 
			row++;
 
			column=0;
 
		}
		if (grid[row][column] != 0) {
			return solve_sudoku(allSolutions, column + 1, row);
		}
 
		for (int digit=1; digit < N + 1; digit++) {
			if (valid_input_number(row, column, digit)) {
 
				grid[row][column] = digit;
 
				if (solve_sudoku(allSolutions, column + 1, row)) {
					return true;
 
				}
			}
			grid[row][column] = 0;
		}
		return false;
 
 
 
 
	}
 
 
 
 
	public void solve(boolean allSolutions) {
 
 
 
		solve_sudoku(allSolutions, 0, 0);
 
 
		if (allSolutions) {
 
 
			solve_sudoku(false, 0, 0);
		}
	}
 
		 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
	
 
	/*****************************************************************************/
	/* NOTE: YOU SHOULD NOT HAVE TO MODIFY ANY OF THE METHODS BELOW THIS LINE. */
	/*****************************************************************************/
 
	/* Default constructor.  This will initialize all positions to the default 0
	 * value.  Use the read() function to load the Sudoku puzzle from a file or
	 * the standard input. */
	public ChessSudoku( int size ) {
		SIZE = size;
		N = size*size;
 
		grid = new int[N][N];
		for( int i = 0; i < N; i++ ) 
			for( int j = 0; j < N; j++ ) 
				grid[i][j] = 0;
	}
 
 
	/* readInteger is a helper function for the reading of the input file.  It reads
	 * words until it finds one that represents an integer. For convenience, it will also
	 * recognize the string "x" as equivalent to "0". */
	static int readInteger( InputStream in ) throws Exception {
		int result = 0;
		boolean success = false;
 
		while( !success ) {
			String word = readWord( in );
 
			try {
				result = Integer.parseInt( word );
				success = true;
			} catch( Exception e ) {
				// Convert 'x' words into 0's
				if( word.compareTo("x") == 0 ) {
					result = 0;
					success = true;
				}
				// Ignore all other words that are not integers
			}
		}
 
		return result;
	}
 
 
	/* readWord is a helper function that reads a word separated by white space. */
	static String readWord( InputStream in ) throws Exception {
		StringBuffer result = new StringBuffer();
		int currentChar = in.read();
		String whiteSpace = " \t\r\n";
		// Ignore any leading white space
		while( whiteSpace.indexOf(currentChar) > -1 ) {
			currentChar = in.read();
		}
 
		// Read all characters until you reach white space
		while( whiteSpace.indexOf(currentChar) == -1 ) {
			result.append( (char) currentChar );
			currentChar = in.read();
		}
		return result.toString();
	}
 
 
	/* This function reads a Sudoku puzzle from the input stream in.  The Sudoku
	 * grid is filled in one row at at time, from left to right.  All non-valid
	 * characters are ignored by this function and may be used in the Sudoku file
	 * to increase its legibility. */
	public void read( InputStream in ) throws Exception {
		for( int i = 0; i < N; i++ ) {
			for( int j = 0; j < N; j++ ) {
				grid[i][j] = readInteger( in );
			}
		}
	}
 
 
	/* Helper function for the printing of Sudoku puzzle.  This function will print
	 * out text, preceded by enough ' ' characters to make sure that the printint out
	 * takes at least width characters.  */
	void printFixedWidth( String text, int width ) {
		for( int i = 0; i < width - text.length(); i++ )
			System.out.print( " " );
		System.out.print( text );
	}
 
 
	/* The print() function outputs the Sudoku grid to the standard output, using
	 * a bit of extra formatting to make the result clearly readable. */
	public void print() {
		// Compute the number of digits necessary to print out each number in the Sudoku puzzle
		int digits = (int) Math.floor(Math.log(N) / Math.log(10)) + 1;
 
		// Create a dashed line to separate the boxes 
		int lineLength = (digits + 1) * N + 2 * SIZE - 3;
		StringBuffer line = new StringBuffer();
		for( int lineInit = 0; lineInit < lineLength; lineInit++ )
			line.append('-');
 
		// Go through the grid, printing out its values separated by spaces
		for( int i = 0; i < N; i++ ) {
			for( int j = 0; j < N; j++ ) {
				printFixedWidth( String.valueOf( grid[i][j] ), digits );
				// Print the vertical lines between boxes 
				if( (j < N-1) && ((j+1) % SIZE == 0) )
					System.out.print( " |" );
				System.out.print( " " );
			}
			System.out.println();
 
			// Print the horizontal line between boxes
			if( (i < N-1) && ((i+1) % SIZE == 0) )
				System.out.println( line.toString() );
		}
	}
 
 
	/* The main function reads in a Sudoku puzzle from the standard input, 
	 * unless a file name is provided as a run-time argument, in which case the
	 * Sudoku puzzle is loaded from that file.  It then solves the puzzle, and
	 * outputs the completed puzzle to the standard output. */
	public static void main( String args[] ) throws Exception {
		InputStream in = new FileInputStream("veryEasy3x3_twoSolutions.txt");
 
		// The first number in all Sudoku files must represent the size of the puzzle.  See
		// the example files for the file format.
		int puzzleSize = readInteger( in );
		if( puzzleSize > 100 || puzzleSize < 1 ) {
			System.out.println("Error: The Sudoku puzzle size must be between 1 and 100.");
			System.exit(-1);
		}
 
		ChessSudoku s = new ChessSudoku( puzzleSize );
		
		// You can modify these to add rules to your sudoku
		s.knightRule = false;
		s.kingRule = false;
		s.queenRule = false;
		
		// read the rest of the Sudoku puzzle
		s.read( in );
 
		System.out.println("Before the solve:");
		s.print();
		System.out.println();
 
		// Solve the puzzle by finding one solution.
		s.solve(true);
 
		// Print out the (hopefully completed!) puzzle
		System.out.println("After the solve:");
		s.print();
	}
}
