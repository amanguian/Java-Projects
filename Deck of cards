 package assignment2;
  
import java.util.Random;
 
public class Deck {
 public static String[] suitsInOrder = {"clubs", "diamonds", "hearts", "spades"};
 public static Random gen = new Random();
 
 public int numOfCards; // contains the total number of cards in the deck
 public Card head; // contains a pointer to the card on the top of the deck
 
 /* 
  * TODO: Initializes a Deck object using the inputs provided
  */
 public Deck(int numOfCardsPerSuit, int numOfSuits) {
 
  if (numOfCardsPerSuit < 1 || numOfCardsPerSuit > 13 || numOfSuits < 1 || numOfSuits > suitsInOrder.length){
   throw new IllegalArgumentException("Please enter a valid input");
  }
 
  for (int i=0; i < numOfSuits; i++){
   String s = suitsInOrder[i];
   for (int a=1; a<=numOfCardsPerSuit; a++){
    this.addCard(new PlayingCard(s, a));
 
   }
  }
  this.addCard(new Joker("red"));
  this.addCard(new Joker("black"));
 
 
  /**** ADD CODE HERE ****/
 }
 
 /* 
  * TODO: Implements a copy constructor for Deck using Card.getCopy().
  * This method runs in O(n), where n is the number of cards in d.
  */
 public Deck(Deck d) {
 
 
  Card tocopy = d.head;
  this.addCard(tocopy.getCopy());
  tocopy = tocopy.next;
 
 
  while(tocopy!= d.head){
   addCard(tocopy.getCopy()); //we copy the first card of the deck
   tocopy = tocopy.next;//We pass to the next card and iterate through all the doubly linked list
 
 
 
  }
 
 
 
  /**** ADD CODE HERE ****/
 }
 
 /*
  * For testing purposes we need a default constructor.
  */
 public Deck() {}
 
 /* 
  * TODO: Adds the specified card at the bottom of the deck. This 
  * method runs in $O(1)$. 
  */
 public void addCard(Card c) {
 
 
 
  if (head == null){
   head = c;
   head.next = head;
   head.prev = head;
   //return;
 
 
  }
  else{
   Card last_card_of_deck = head.prev ; // we are gonna count last_card_of_deck as being the last card
 
   last_card_of_deck.next = c;
   c.next = head;
   c.prev = last_card_of_deck;
   head.prev = c;
 
 
 
  }
  numOfCards++;
 
  /**** ADD CODE HERE ****/
 
 }
 
 /*
  * TODO: Shuffles the deck using the algorithm described in the pdf. 
  * This method runs in O(n) and uses O(n) space, where n is the total 
  * number of cards in the deck.
  */
 public void shuffle() {
  /**** ADD CODE HERE ****/
 
  int size_deck = numOfCards;
 
  if (size_deck==0 || size_deck==1) {
  return;
  }
 
  Card[] array_cards = new Card[size_deck];
  Card a = head;
 
 
 
  for (int b=0; b<size_deck;b++) {
   array_cards[b] = a;
   a = a.next;
   // we copied all the cards in the array
  }
 
 
  for(int i=size_deck-1; i>0; i--){
 
   int j = gen.nextInt(i+1);
   Card tmp = array_cards[i];
   array_cards[i] = array_cards[j];
   array_cards[j] = tmp;
  }
 
 
  head = array_cards[0];
  head.next = array_cards[1];
  head.prev = array_cards[size_deck-1];
 
 
  for(int c=1;c<size_deck-1;c++){
   array_cards[c].next = array_cards[c+1];
   array_cards[c].prev = array_cards[c-1];
  }
 
  array_cards[size_deck-1].prev = array_cards[size_deck-2];
  array_cards[size_deck-1].next = head;
 
 
 }
 
 /*
  * TODO: Returns a reference to the joker with the specified color in 
  * the deck. This method runs in O(n), where n is the total number of 
  * cards in the deck. 
  */
 public Joker locateJoker(String color) {
  /**** ADD CODE HERE ****/
 
  //the joker are the two last cards of the deck
  // the jokers have both the same value and this value is equal to the total number of
  //cards in the deck minus one.
 
 
 
  Card first_card = head;
 
  for(int i=0; i<numOfCards; i++) {
 
   if (first_card instanceof Joker && ((Joker) first_card).getColor() == color) {
    break;
   }
   else{
   first_card = first_card.next;
  }}
 
  if (!(first_card instanceof Joker)){
   return null;
  }
 
  //we have to say that first_card is gonna be of type Joker
  return (Joker) first_card;
 
 
 
    }
 
 
 
 
 
 
 
 
 
 
 
 /*
  * TODO: Moved the specified Card, p positions down the deck. You can 
  * assume that the input Card does belong to the deck (hence the deck is
  * not empty). This method runs in O(p).
  */
 public void moveCard(Card c, int p) {
  /**** ADD CODE HERE ****/
 
  if (p == 0){
   return;
  }
 
  c.prev.next = c.next;
  c.next.prev = c.prev;
 
 
  Card other_card = c;
 
  for (int i=0; i<p; i++){
   other_card = other_card.next;
  }
 
  c.prev = other_card;
  c.next = other_card.next;
  other_card.next.prev = c;
  other_card.next = c;
 
 
 
   }
 
 
 
 
 
 /*
  * TODO: Performs a triple cut on the deck using the two input cards. You 
  * can assume that the input cards belong to the deck and the first one is 
  * nearest to the top of the deck. This method runs in O(1)
  */
 public void tripleCut(Card firstCard, Card secondCard) {
  /**** ADD CODE HERE ****/
  //let's point out the card that we need:
 
  Card head_card = head;
  Card tail_card = head.prev;
 
 
 
 
 
  if (secondCard == tail_card){
   head = firstCard;
  }
 
  else if(firstCard == head_card){
   Card after_second_card = secondCard.next;
   head = after_second_card;
  }
  else {
   Card before_first_card = firstCard.prev;
   Card after_second_card = secondCard.next;
 
   //Let's do the tripleCut
   secondCard.next = head_card;
   head_card.prev = secondCard;
 
   before_first_card.next = after_second_card;
   after_second_card.prev = before_first_card;
 
   firstCard.prev = tail_card;
   tail_card.next = firstCard;
 
   head = after_second_card;
  }
 
  Card tempHead = head;
  Card tempLastCard = head.prev;
 
/*
  if (head == firstCard){
   Card newHead = secondCard.next;
   head = newHead;
  }
 
  else if (secondCard == head.prev){
   head = firstCard;
  }
 
  else{
   Card beforeFirst = firstCard.prev;
   Card afterSecond = secondCard.next;
 
   head = afterSecond;
   secondCard.next = head;
   head.prev = secondCard;
 
   secondCard.next = tempHead;
   tempHead.prev = secondCard;
   beforeFirst.next = head;
   head.prev = beforeFirst;
 
   tempLastCard.next = firstCard;
   firstCard.prev = tempLastCard;
 
*/
 
 
 
 
 
  }
 
 
 
 
 
 /*
  * TODO: Performs a count cut on the deck. Note that if the value of the 
  * bottom card is equal to a multiple of the number of cards in the deck, 
  * then the method should not do anything. This method runs in O(n).
  */
 public void countCut() {
  /**** ADD CODE HERE ****/
 
  Card last_card = head.prev;
  int value = last_card.getValue();
  int correct = value % numOfCards;
 
  if (correct != 0 && correct != numOfCards-1) {
 
   //let's point out the cards that we want:
   Card head_card = head;
 
   Card other_card = head;
   for (int i = 0; i < correct-1; i++) {
    other_card = other_card.next;
   }
 
 
 
   Card new_head_card = other_card.next;
 
   Card before_bottom_card = last_card.prev;
 
 
   //Now let's perform the cut
   new_head_card.prev = last_card;
   other_card.next = last_card;
   last_card.prev = other_card;
   last_card.next = new_head_card;
   head_card.prev = before_bottom_card;
   before_bottom_card.next = head_card;
 
 
   head = new_head_card;
 
 
 
 
 }}
 
 /*
  * TODO: Returns the card that can be found by looking at the value of the 
  * card on the top of the deck, and counting down that many cards. If the 
  * card found is a Joker, then the method returns null, otherwise it returns
  * the Card found. This method runs in O(n).
  */
 public Card lookUpCard(){
  /**** ADD CODE HERE ****/
  Card top_deck = head;
 
 
  int value = top_deck.getValue();
 
  for (int i=0; i<value; i++){
   top_deck = top_deck.next;
  }
 
  if (top_deck instanceof Joker ){
   return null;
  }
  return top_deck;
 
 
  }
 
 
 
 
 /*
  * TODO: Uses the Solitaire algorithm to generate one value for the keystream 
  * using this deck. This method runs in O(n).
  */
 public int generateNextKeystreamValue() {
  /**** ADD CODE HERE ****/
 
  Card red_joker = this.locateJoker("red");
  moveCard(red_joker, 1);
  if (red_joker == head.prev){
   moveCard(red_joker, 1);
  }
 
  Card black_joker = this.locateJoker("black");
  moveCard(black_joker, 2);
  if (black_joker == head.prev){
   moveCard(black_joker, 2);
  }
 
  Card head_card = head;
  while(head_card.next != head ){
   head_card = head_card.next;
   if (head_card == red_joker){
    tripleCut(red_joker, black_joker);
    head_card = head;
    countCut();
    break;
   }
   else if (head_card == black_joker){
    tripleCut(black_joker, red_joker);
    head_card = head;
    countCut();
    break;
   }
  }
 
  int value = lookUpCard().getValue();
 
  while (lookUpCard() == null){
   generateNextKeystreamValue();
  }
 
  return value;
 
 
 
 
 
 
 
 }
 
 
 public abstract class Card { 
  public Card next;
  public Card prev;
 
  public abstract Card getCopy();
  public abstract int getValue();
 
 }
 
 public class PlayingCard extends Card {
  public String suit;
  public int rank;
 
  public PlayingCard(String s, int r) {
   this.suit = s.toLowerCase();
   this.rank = r;
  }
 
  public String toString() {
   String info = "";
   if (this.rank == 1) {
    //info += "Ace";
    info += "A";
   } else if (this.rank > 10) {
    String[] cards = {"Jack", "Queen", "King"};
    //info += cards[this.rank - 11];
    info += cards[this.rank - 11].charAt(0);
   } else {
    info += this.rank;
   }
   //info += " of " + this.suit;
   info = (info + this.suit.charAt(0)).toUpperCase();
   return info;
  }
 
  public PlayingCard getCopy() {
   return new PlayingCard(this.suit, this.rank);   
  }
 
  public int getValue() {
   int i;
   for (i = 0; i < suitsInOrder.length; i++) {
    if (this.suit.equals(suitsInOrder[i]))
     break;
   }
 
   return this.rank + 13*i;
  }
 
 }
 
 public class Joker extends Card{
  public String redOrBlack;
 
  public Joker(String c) {
   if (!c.equalsIgnoreCase("red") && !c.equalsIgnoreCase("black")) 
    throw new IllegalArgumentException("Jokers can only be red or black"); 
 
   this.redOrBlack = c.toLowerCase();
  }
 
  public String toString() {
   //return this.redOrBlack + " Joker";
   return (this.redOrBlack.charAt(0) + "J").toUpperCase();
  }
 
  public Joker getCopy() {
   return new Joker(this.redOrBlack);
  }
 
  public int getValue() {
   return numOfCards - 1;
  }
 
  public String getColor() {
   return this.redOrBlack;
  }
 }
 
}
